#ifndef __RENDER_ABSTRACT__
#define __RENDER_ABSTRACT__

#include "defs.h"
#include "r_predrawwait.h"
#include "r_sbuffer.h"

#include <pool.h>
#include "camera.h"
#include <graph\grtypes.h>

class    MainRender;

////////////////////////////////////////////////////////////////////////////////
///Абстрактный рендер
////////////////////////////////////////////////////////////////////////////////
class     Render: public MemObject, public PredrawWait
{
  public:
                        Render  (Pool*,MainRender* = NULL);
           virtual      ~Render () {}

////////////////////////////////////////////////////////////////////////////////
///Присоединение MainRender
////////////////////////////////////////////////////////////////////////////////
           void         bind            (MainRender* render) { mMainRender = render; }

////////////////////////////////////////////////////////////////////////////////
///Отрисовка
////////////////////////////////////////////////////////////////////////////////
   virtual void         DrawShadow      (mesh_t*,int = 1,DWORD param = 0) {}  //without clip-check
   virtual void         DrawAlpha       (DWORD param,const Camera&) {} 
   virtual void         Draw            () = 0;

////////////////////////////////////////////////////////////////////////////////
///Установление вершинного буфера (может и не быть)
////////////////////////////////////////////////////////////////////////////////
   virtual void         SetVertexBuffer (mesh_t*) {}

////////////////////////////////////////////////////////////////////////////////
///Количество трегольников
////////////////////////////////////////////////////////////////////////////////
           uint         GetTPS          ()  { uint cnt = mPgCount; mPgCount = 0; return cnt; }

////////////////////////////////////////////////////////////////////////////////
///Установки параметров среды
////////////////////////////////////////////////////////////////////////////////
           void         SetCamera       (const Camera& c)      { mCamera  = c;  }
           void         SetFrustum      (const frustum_t& f)   { mFrustum = f;  }
           void         SetSBuffer      (SBuffer* sb)          { mSBuffer = sb; }

  protected:
////////////////////////////////////////////////////////////////////////////////
///Отрисовка мэша
////////////////////////////////////////////////////////////////////////////////
           void         DrawMesh        (mesh_t*);

////////////////////////////////////////////////////////////////////////////////
///Изменение состояний
////////////////////////////////////////////////////////////////////////////////
           BOOL         ChangeEnv       (int tile,uint _InterruptDrawing = 0);
           BOOL         SetMaterial     (int mat,int mode = RENDER_TEXT_SET | RENDER_MAT_SET);

           MainRender*  mainrender      () const { return (MainRender*)mMainRender; }

////////////////////////////////////////////////////////////////////////////////
///Работа с серверами отрисовки  
////////////////////////////////////////////////////////////////////////////////

//////////////////////Отрисовка в теневой буфер/////////////////////////////////

           void         AddPredraw      ();
           void         DelPredraw      ();

   virtual void         predraw         () {}

//////////////////////Отрисовка полупрозрачности////////////////////////////////

           void         AddAlpha        (float dist,DWORD param);

  private:
        MainRender*     mMainRender;

  protected:
        int             mPgCount;

        Camera          mCamera;
        frustum_t       mFrustum;
        SBuffer*        mSBuffer;        
};

#endif