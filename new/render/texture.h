#ifndef __RENDER_TEXTURE_2D__
#define __RENDER_TEXTURE_2D__
                         
#include <render\material.h>

////////////////////////////////////////////////////////////////////////////////////////////
///Альфатест заканчивается положительно
////////////////////////////////////////////////////////////////////////////////////////////
enum Texture2DAlphaTestOp {
  T2D_AT_NEVER = 0,   //никогда
  T2D_AT_ALWAYS,      //всегда
  T2D_AT_EQUAL,       //src == ref
  T2D_AT_NOTEQUAL,    //src != ref
  T2D_AT_LESS,        //src < ref
  T2D_AT_LEQUAL,      //src <= ref
  T2D_AT_GREATER,     //src > ref
  T2D_AT_GEQUAL       //src >= ref
};

////////////////////////////////////////////////////////////////////////////////////////////
///Фильтры текстуры
////////////////////////////////////////////////////////////////////////////////////////////
enum TextureFilters {
  TEXTURE_2D_DEFAULT = 0,                       //фильтр определяеся в окружении
  T2D_NEAREST,                           
  T2D_LINEAR, 
  T2D_NEAREST_MIPMAP_NEAREST,
  T2D_LINEAR_MIPMAP_NEAREST,
  T2D_NEAREST_MIPMAP_LINEAR,
  T2D_LINEAR_MIPMAP_LINEAR,

  T2D_BILINEAR  = T2D_LINEAR,
  T2D_TRILINEAR = T2D_LINEAR_MIPMAP_LINEAR,
  T2D_ANISOTROPIC
};

////////////////////////////////////////////////////////////////////////////////////////////
///Обрезание текстуры
////////////////////////////////////////////////////////////////////////////////////////////
enum TextureWraps {
  T2D_CLAMP  = 0,
  T2D_REPEAT = 1
};


////////////////////////////////////////////////////////////////////////////////////////////
///Двумерная текстура
////////////////////////////////////////////////////////////////////////////////////////////
class    Texture2D
{
  public:
                Texture2D        ();
                ~Texture2D       ();

        uchar   enable;     : 1; //разрешено текстурирование        
        uchar   channel     : 5; //канал текстурирования

        uchar   borderEnable: 1; //присутствует ли бордюр
        Color3  borderColor;     //бордюр

        uchar   min_filter  : 3; //фильтр 
        uchar   mag_filter  : 3; //фильтр        
        uchar   wrap_s      : 1; //поведение при перевале за границу s
        uchar   wrap_t      : 1; //поведение ... t     

        uchar   alphaOp     : 3; //операция при альфатесте (default:T2D_AT_ALWAYS - alpha_test off)
        float   alpha;           //значение, с которым производится сравнение

        Matrix  transform;       //матрица трансформации текстуры

////////////////////////////////////////////////////////////////////////////////////////////
///Внутренние параметры текстуры
////////////////////////////////////////////////////////////////////////////////////////////
        int     width            () const; //ширина текстуры
        int     height           () const; //высота текстуры
        int     iformat          () const; //внутрений формат текстуры

////////////////////////////////////////////////////////////////////////////////////////////
///Приоритет текстуры 
////////////////////////////////////////////////////////////////////////////////////////////
        void    SetPrior         (float);
        float   GetPrior         () const;

        bool    IsResident       () const; //находится ли в видеопамяти

////////////////////////////////////////////////////////////////////////////////////////////
///Установка в контекст / удаление
////////////////////////////////////////////////////////////////////////////////////////////
        void    BindTexture      ();
        void    UnloadTexture    ();

        bool    IsLoad           () const { return mTexture != 0; } //загружена ли текстура

////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка текстуры в видеопамять
////////////////////////////////////////////////////////////////////////////////////////////
        bool    SetTexImage      (GLint internalformat, GLsizei width, GLsizei height,GLenum format, GLenum type, const GLvoid *pixels);

  private:
        uint    mTexture;
};

/*

////////////////////////////////////////////////////////////////////////////////////////////
///Текстура
////////////////////////////////////////////////////////////////////////////////////////////
class   Texture2D: public Material
{
  public:
                        Texture2D  (uint arb_number = 0);
    virtual             ~Texture2D ();

////////////////////////////////////////////////////////////////////////////////////////////
///Параметры текстуры
////////////////////////////////////////////////////////////////////////////////////////////
        struct params_t
        {
          uchar min_filter  : 3; //фильтр 
          uchar mag_filter  : 3; //фильтр
          uchar wrap_s      : 1; //поведение при перевале за границу s
          uchar wrap_t      : 1; //поведение ... t     
        };

        params_t        params;    //параметры
        Color3          border;    //бордюр

        Matrix          transform; //трансформация

////////////////////////////////////////////////////////////////////////////////////////////
///Подтвердить изменения (изменения матрицы подтверждать не нужно)
////////////////////////////////////////////////////////////////////////////////////////////
             void       ApplyChanges       ();

////////////////////////////////////////////////////////////////////////////////////////////
///Трансформация наложения текстуры
////////////////////////////////////////////////////////////////////////////////////////////
             void       SetOffset          (float u,float v);
             void       SetTiling          (float u,float v);

             void       Translate          (const Vector3&);
             void       Scale              (const Vector3&);

             void       Translate          (float du,float dv);
             void       Scale              (float su,float sv);

////////////////////////////////////////////////////////////////////////////////////////////
///Установить ARB номер текстуры при мультитекстурировании
////////////////////////////////////////////////////////////////////////////////////////////
             void       SetTexNumber       (uint number);
             uint       GetTexNumber       () const { return mNumber; }

  protected:
////////////////////////////////////////////////////////////////////////////////////////////
///Загрузка текстуры
////////////////////////////////////////////////////////////////////////////////////////////
             void       UploadTexture      ();

////////////////////////////////////////////////////////////////////////////////////////////
///Запрос битовой карты
///Возвращаемое значение является временных и может быть удалено в любой момент
///Данные битовой карты могут изменяться 
////////////////////////////////////////////////////////////////////////////////////////////
    virtual  bitmap_t*  GetBitmap          (MatEnv&) = 0;


////////////////////////////////////////////////////////////////////////////////////////////
///Присоединение материала / загрузка / выгрузка материала
////////////////////////////////////////////////////////////////////////////////////////////
    virtual  void       Bind               (); 
    virtual  bool       Load               ();
    virtual  void       Unload             ();

  private:            
////////////////////////////////////////////////////////////////////////////////////////////
///Изменение параметров текстуры
////////////////////////////////////////////////////////////////////////////////////////////
             void       SetTextureParams   ();

////////////////////////////////////////////////////////////////////////////////////////////
///Создание Mipmap'ов
////////////////////////////////////////////////////////////////////////////////////////////
             bool       Build2DMipmaps     (int    bytesPP,
                                            int    width,
                                            int    height,
                                            GLenum format,   
                                            GLenum type, 
                                            const void *data
                                           );

  private:
     uint    mTexture2D;       //индекс текстуры в контексте OpenGL
     uchar   mChange;          //обновление параметров текстуры
     uchar   mNumber;          //ARB номер текстуры 
};

inline void Texture2D::ApplyChanges ()
{
  mChange = true;
}

*/

#endif