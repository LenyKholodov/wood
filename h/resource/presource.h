#ifndef __PRIOR_RESOURCE__
#define __PRIOR_RESOURCE__

#include <resource\resource.h>

class PriorResourceGroup;

/////////////////////////////////////////////////////////////////////////////////////////////
///Ресурс с приоритетом
/////////////////////////////////////////////////////////////////////////////////////////////
class   PriorResource: public Resource
{
  friend class PriorResourceGroup;
  public:
                        PriorResource  (PriorResourceGroup* group = NULL);

/////////////////////////////////////////////////////////////////////////////////////////////
///Полиморфная функция возврата размера ресуса в байтах
/////////////////////////////////////////////////////////////////////////////////////////////
       virtual  size_t  size            ()  const { return sizeof (PriorResource); }

/////////////////////////////////////////////////////////////////////////////////////////////
///Возвращает приоритет ресурса
/////////////////////////////////////////////////////////////////////////////////////////////
       inline    float  prior           () const { return mPrior; }
       inline    uint   count           () const { return mCount; } //кол-во доступов

/////////////////////////////////////////////////////////////////////////////////////////////
///Запирание ресурса
/////////////////////////////////////////////////////////////////////////////////////////////
       virtual   uint   lock            () {
         if (!Resource::lock ())
           return 0;

         mCount++;

         return LockCount ();
       }

       virtual   void   unload          () { Resource::unload (); mCount = 0; mPrior = 0; }

  private:
            float             mPrior;
            uint              mCount;
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Мэнеджер контроля системных ресурсов
/////////////////////////////////////////////////////////////////////////////////////////////
class   PriorResourceGroup: public ResourceGroup
{
  public:
                PriorResourceGroup  (size_t recommended_upper_size = 0); //0:unlimited

/////////////////////////////////////////////////////////////////////////////////////////////
///Пересчёт приоритетов и вынос неиспользуемых ресурсов
/////////////////////////////////////////////////////////////////////////////////////////////
       void     process              ();

/////////////////////////////////////////////////////////////////////////////////////////////
///Установка максимального / минимального приоритета
/////////////////////////////////////////////////////////////////////////////////////////////
       void     SetMaxPrior          (float max_prior); 
       void     SetMinPrior          (float min_prior);

  private:
        size_t  mMaxSize;
        float   mMaxPrior, mMinPrior;
};

#endif