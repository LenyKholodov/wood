#ifndef __KERNEL_SEQUENCE__
#define __KERNEL_SEQUENCE__

#include <types.h>
#include <kernel\critsect.h>

////////////////////////////////////////////////////////////////////////////////////////////
///Объект синхронизации
////////////////////////////////////////////////////////////////////////////////////////////
class SequenceObject
{
  public:
                 ~SequenceObject ();

            bool open    ();
    static  bool open    (uint count,SequenceObject*); //count <= 32

  protected:
    SequenceObject (HANDLE);

  protected:
    HANDLE mHandle;
};

////////////////////////////////////////////////////////////////////////////////////////////
///Мьютекс
////////////////////////////////////////////////////////////////////////////////////////////
class Mutex: public SequenceObject
{
  public:
          Mutex   ();
    void  release ();
};

////////////////////////////////////////////////////////////////////////////////////////////
///Семафор
////////////////////////////////////////////////////////////////////////////////////////////
class Semaphore: public SequenceObject
{
  public:
         Semaphore  (uint max_count,uint start_count=0); //if start_count == 0 ->start_count = max_count
    void release    ();       
};

////////////////////////////////////////////////////////////////////////////////////////////
///Событие
////////////////////////////////////////////////////////////////////////////////////////////
class Event: public SequenceObject
{
  public:
         Event   (bool start_state,bool manual=false);

    void reset ();       
    void set   ();
    void pulse ();
    void release() { reset (); }  
};

#endif