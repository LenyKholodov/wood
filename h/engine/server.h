#ifndef __GAME_SYSTEM_SERVER__
#define __GAME_SYSTEM_SERVER__

#include <engine\stream.h>
#include <memory\memory.h>
#include <misc\dict.h>
#include <misc\ring.h>
#include <memory\pool.h>

/////////////////////////////////////////////////////////////////////////////////////////////
///Сообщения присущие серверу (протоклассу)
/////////////////////////////////////////////////////////////////////////////////////////////
enum ServerMsg 
{
  MSG_TICK = MSG_GLOBAL_SERVER,
  MSG_PAUSE,
  MSG_STOP,
  MSG_RESUME,
  MSG_RESTART  
};

class    Server;

/////////////////////////////////////////////////////////////////////////////////////////////
///Соединение с сервером (фактически шлюз)
/////////////////////////////////////////////////////////////////////////////////////////////
class    Connection
{
  friend class Server;
  public:
                Connection  (Pool* = M_GetPool ());
   virtual      ~Connection ();

/////////////////////////////////////////////////////////////////////////////////////////////
///Потоки ввода - вывода
/////////////////////////////////////////////////////////////////////////////////////////////
    MessageStream&    ws () { return *mWrite; } //поток в который пишет клиент
    MessageStream&    rs () { return *mRead;  } //поток из которого читает клиент

    bool    BindWriteStream (MessageStream&);
    bool    BindReadStream  (MessageStream&);

/////////////////////////////////////////////////////////////////////////////////////////////
///Работа с сообщениями
/////////////////////////////////////////////////////////////////////////////////////////////
    bool    BindMessage   (msg_t from,msg_t to = -1);
    void    UnbindMessage (msg_t);

  private:
    void    BindServer   (Server&);
    void    UnbindServer ();

    msg_t   ReindexMsg   (msg_t) const; //ret: -1 - not find

    static  void ConnectionHandler (MessageStream::Action,Connection&);

  private:
    typedef Dict<msg_t,msg_t>   MsgMap;
              
  private:
        MsgMap          mMsgMap;
        MessageStream   *mWrite, *mRead;
        Server*         mServer;
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Инкапсулированный асинхронный модуль управления игровым процессом
/////////////////////////////////////////////////////////////////////////////////////////////
class    Server: public MemObject
{
  friend class ServerThread;
  friend class Connection;
  public:
                        Server  (Pool* = Memory::M_GetPool ());
            virtual     ~Server ();

/////////////////////////////////////////////////////////////////////////////////////////////
///Диспетчер сообщений
/////////////////////////////////////////////////////////////////////////////////////////////
//    class MsgHandler;    

/////////////////////////////////////////////////////////////////////////////////////////////
///Основные команды
/////////////////////////////////////////////////////////////////////////////////////////////
//                void    pause    ();
//                void    resume   ();
//                void    restart  ();

//                void    save     ();
//                bool    load     ();

/////////////////////////////////////////////////////////////////////////////////////////////
///Система распределения времени + Ticker
/////////////////////////////////////////////////////////////////////////////////////////////
//    void        AddTickClient   (); 

/////////////////////////////////////////////////////////////////////////////////////////////
///Вынесенная обработка ошибок сервера (сообщение клиентам об ошибках сервера)
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
///Работа с командными скриптами
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
///Распределение памяти внутри сервера
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
///Работа с ресурсами
/////////////////////////////////////////////////////////////////////////////////////////////
//1) распределение, доступ
//2) сохранение, восстановление

/////////////////////////////////////////////////////////////////////////////////////////////
///Работа с локальными для сервера (статическими для его локальных клиентов) переменными //???
/////////////////////////////////////////////////////////////////////////////////////////////
//        typedef ServerStaticVar static_t;

/////////////////////////////////////////////////////////////////////////////////////////////
///Создание логического соединения с другим игровым сервером
/////////////////////////////////////////////////////////////////////////////////////////////
//создание, унифицирование
//активное / пассивное
            bool        AddConnection (Connection&);
            void        DelConnection (Connection&);

  protected:
/////////////////////////////////////////////////////////////////////////////////////////////
///Игровые сообщения  
/////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool        ProcessMessage (msg_t,MessageStream&,MessageStream&);

  private:
            void ConnectionHandler (MessageStream::Action,Connection&);
            int  ProcessThread     ();

  private:
        Thread*            mThread;

        Ring<Connection*>  mConnections;

        Ring<Connection*>  mMsgList;
        CritSect           mMsgTrans;
        uint               mWaitMsgNum;
        Thread*            mWaitThread;

        bool               mSleep;
};

#endif