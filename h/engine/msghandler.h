
/////////////////////////////////////////////////////////////////////////////////////////////
///Обработчик сообщений
/////////////////////////////////////////////////////////////////////////////////////////////
class   MessageHandler
{
  friend class MsgDispatch;
  public:
        virtual      ~MessageHandler () {}
 
/////////////////////////////////////////////////////////////////////////////////////////////
///Функция обработчик сообщений для перехвата
/////////////////////////////////////////////////////////////////////////////////////////////
        typedef bool (*MsgHandler)(msg_t,MessageStream&,MessageStream&,void* self_data);

        virtual bool process (msg_t,MessageStream& in,MessageStream& out) = 0;

  private:
        static  bool ProcessMessage (msg_t,MessageStream&,MessageStream&,void*);
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Диспетчер сообщений
/////////////////////////////////////////////////////////////////////////////////////////////
class   MsgDispatch: public MessageHandler
{
  public:
                MsgDispatch   (Pool*);

        bool    BindMessage   (msg_t from,msg_t to = -1,MsgHandler = NULL,void* self = NULL);
        bool    BindMessage   (MessageHandler&,msg_t from,msg_t to = -1);
        void    UnbindMessage (msg_t);

/////////////////////////////////////////////////////////////////////////////////////////////
///Отправление сообщения диспетчеру
/////////////////////////////////////////////////////////////////////////////////////////////
        bool    PutMessage    (msg_t,MessageStream&);

/////////////////////////////////////////////////////////////////////////////////////////////
///Обработка сообщений адресованных данному диспетчеру (не перехваченных потомками)
/////////////////////////////////////////////////////////////////////////////////////////////
        virtual bool process  (msg_t,MessageStream&);

  private:
        struct msgnode_t
        {
          MsgHandler    fn;
          void*         data;
          msg_t         toMsg;
        };

        typedef Dict<msgnode_t,msg_t>  MsgDict;

        MsgDict          mDict;
};
