#ifndef __KERNEL_EXCEPTION_SYSTEM__
#define __KERNEL_EXCEPTION_SYSTEM__

#include <types.h>
#include <misc\string.h>
#include <iosfwd>

#pragma warning (disable: 4290)

class    Pool;
class    MemObject;

/////////////////////////////////////////////////////////////////////////////////////////////
///Прототип исключения
/////////////////////////////////////////////////////////////////////////////////////////////
class  Exception
{
  public:
        Exception (const char* who,
                   const char* what
                  ) : mWhat (what), mWho (who) {}
        virtual ~Exception () {}

        virtual std::ostream& print (std::ostream& os) const {
          os<<mWho<<": "<<mWhat;
          return os;
        }

        friend std::ostream& operator << (std::ostream&,Exception&);

        Str32&          who  () { return mWho;  }
        Str256&         what () { return mWhat; }

  private:
        Str32   mWho;
        Str256  mWhat;
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Генерируется в случае нехватки памяти при вызове operator new (operator new [])
/////////////////////////////////////////////////////////////////////////////////////////////
class    ExcBadAlloc: public Exception
{
  public:
              ExcBadAlloc  (const char* who,size_t size,Pool* pool)
                : Exception (who,"Bad alloc"), mSize (size), mPool (pool) {}
      virtual ~ExcBadAlloc () {}

/////////////////////////////////////////////////////////////////////////////////////////////
///Вывод сообщения
/////////////////////////////////////////////////////////////////////////////////////////////
      virtual  std::ostream&   print (std::ostream& os)
      {
        print (os);
        os<<" ("<<mSize<<") in pool "<<mPool<<std::endl;
        return os;
      }

/////////////////////////////////////////////////////////////////////////////////////////////
///Доступ
/////////////////////////////////////////////////////////////////////////////////////////////
               size_t      size  () const { return mSize; }
               Pool*       pool  () const { return mPool;  }

  private:
      size_t          mSize;
      Pool*           mPool;
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Генерируется в случае нехватки памяти 
/////////////////////////////////////////////////////////////////////////////////////////////
class   ExcNoMemory: public Exception
{
  public:
              ExcNoMemory  (const char* who,size_t size,void* object = NULL)
              :  Exception (who,"No enough memory"), mSize (size), mObj (object) {}
      virtual ~ExcNoMemory () {}

/////////////////////////////////////////////////////////////////////////////////////////////
///Вывод сообщения
/////////////////////////////////////////////////////////////////////////////////////////////
      virtual  std::ostream&   print (std::ostream& os)
      {
        print (os);
        os<<" ("<<mSize<<") from object "<<mObj<<std::endl;
        return os;
      }

/////////////////////////////////////////////////////////////////////////////////////////////
///Доступ
/////////////////////////////////////////////////////////////////////////////////////////////
               size_t      size  () const { return mSize; }
               void*       obj   () const { return mObj;  }

  private:
      size_t          mSize;
      void*           mObj;
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Генерируется в случае доступа к отсутствующему элементу
/////////////////////////////////////////////////////////////////////////////////////////////
class    ExcNoElement: public Exception
{
  public:
        ExcNoElement (const char* who): Exception (who,"Access to NULL element") {}
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Генерируется в случае pop из пустых структур
/////////////////////////////////////////////////////////////////////////////////////////////
class    ExcEmpty: public Exception
{
  public:
                ExcEmpty (const char* who): Exception (who,"Pop from empty set") {}
};

/////////////////////////////////////////////////////////////////////////////////////////////
///Генерируется в случае PUSH в заполненные стуктуры
/////////////////////////////////////////////////////////////////////////////////////////////
class    ExcFull: public Exception
{
  public:
                ExcFull (const char* who): Exception (who,"Push at full set") {}
};


#endif