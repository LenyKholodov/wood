#ifndef __KERNEL_RING__
#define __KERNEL_RING__

#include <misc\list.h>

/////////////////////////////////////////////////////////////////////////////////////////////
///Кольцо
/////////////////////////////////////////////////////////////////////////////////////////////
class BaseRing: public BaseCollection
{
  public:
        BaseRing ();

/////////////////////////////////////////////////////////////////////////////////////////////
///Основные словарные операции
/////////////////////////////////////////////////////////////////////////////////////////////
        void            InsertFirst  (listnode_t&); 
        void            InsertLast   (listnode_t&); 
        void            Insert       (listnode_t& node) { InsertLast (node); }

/////////////////////////////////////////////////////////////////////////////////////////////
///Сброс без освобождения памяти
/////////////////////////////////////////////////////////////////////////////////////////////
        virtual void    reset        ();

/////////////////////////////////////////////////////////////////////////////////////////////
///Проверка
/////////////////////////////////////////////////////////////////////////////////////////////
        bool            IsLast   (const listnode_t& node) const { return node.next == mFirst; }
        bool            IsFirst  (const listnode_t& node) const { return node.next ? node.next->prev == mFirst : false; }
        bool            IsValid  (const listnode_t& node) const { return &node && node.next && node.prev; }

/////////////////////////////////////////////////////////////////////////////////////////////
///Первый / последний элементы        
/////////////////////////////////////////////////////////////////////////////////////////////
       listnode_t&      GetFirst     () const { return *mFirst; }
       listnode_t&      GetLast      () const { return mFirst ? *mFirst->prev : *mFirst; }  

/////////////////////////////////////////////////////////////////////////////////////////////
///Перемещение в начало списка / в конец списка
/////////////////////////////////////////////////////////////////////////////////////////////
        void            SetFirst   (listnode_t& node)  { InsertFirst (node); }
        void            SetLast    (listnode_t& node)  { InsertLast (node); }

/////////////////////////////////////////////////////////////////////////////////////////////
///Удаление
/////////////////////////////////////////////////////////////////////////////////////////////
        void            Erase      (listnode_t&);

  private:
        listnode_t*     mFirst;
};

//////////////////////////////////////////////////////////////////////////////////////////////
///Кольцо 
//////////////////////////////////////////////////////////////////////////////////////////////
template <class T> 
class Ring: public Collection<T,BaseRing>
{
  public:
      Ring (Pool* pool = Memory::M_GetPool()): Collection<T,BaseRing> (pool) {}
};

#define RingTmpl Ring

#endif